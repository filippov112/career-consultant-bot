# handlers.py
import logging
# import asyncio # –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞
from telegram import Update, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
)

import database
import keyboards
from quizzes_data import get_quiz_by_id # get_quiz_by_id —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏ max_possible_score

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def register_user_if_not_exists(update: Update):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç.
    """
    user = update.effective_user
    if user:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞,
        # —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å SELECT –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º INSERT/UPDATE,
        # –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —à–∞–±–ª–æ–Ω–∞ –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫. add_or_update_user —Å–∞–º–∞ —Å–ø—Ä–∞–≤–∏—Ç—Å—è —Å ON CONFLICT.
        database.add_or_update_user(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        # logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} @{user.username} –ø—Ä–æ–≤–µ—Ä–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await register_user_if_not_exists(update)
    user = update.effective_user
    welcome_message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.mention_html(user.first_name)}!\n\n"
        "–Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n"
        "‚úÖ –ü—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç—ã –∏ –Ω–∞–±–∏—Ä–∞—Ç—å –±–∞–ª–ª—ã\n"
        "üìä –£–∑–Ω–∞–≤–∞—Ç—å —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
        "üìÑ –ü–æ–ª—É—á–∞—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    reply_markup = keyboards.main_menu_keyboard()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    sent_message = await update.message.reply_html(text=welcome_message, reply_markup=reply_markup)
    context.user_data['main_menu_message_id'] = sent_message.message_id


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = (
        "ü§ñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**\n\n"
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n"
        "/info - –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n"
        "/quiz - –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Å—Ç (–≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞).\n\n"
        "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
    )
    await update.message.reply_markdown(help_text)


async def _send_or_edit_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, reply_markup: InlineKeyboardMarkup):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é."""
    if update.callback_query:
        try:
            await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='HTML')
        except Exception as e: # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω—é: {e}. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ.")
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ –∏–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å),
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
            if update.effective_message:
                 sent_message = await update.effective_message.reply_html(text=text, reply_markup=reply_markup)
                 context.user_data['main_menu_message_id'] = sent_message.message_id
            elif update.effective_chat: # –µ—Å–ª–∏ –Ω–µ—Ç effective_message, –Ω–æ –µ—Å—Ç—å —á–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç /–∫–æ–º–∞–Ω–¥—ã)
                 sent_message = await context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=reply_markup, parse_mode='HTML')
                 context.user_data['main_menu_message_id'] = sent_message.message_id

    elif update.message: # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞
        sent_message = await update.message.reply_html(text=text, reply_markup=reply_markup)
        context.user_data['main_menu_message_id'] = sent_message.message_id


async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await register_user_if_not_exists(update)
    menu_text = "üìã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>"
    reply_markup = keyboards.main_menu_keyboard()
    await _send_or_edit_menu(update, context, menu_text, reply_markup)


async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await register_user_if_not_exists(update)
    current_time_str = context.application.bot_data.get('start_time', '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ') # –ò—Å–ø–æ–ª—å–∑—É–µ–º application.bot_data
    info_text = (
        "üí° <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –∫–∞–∫ —à–∞–±–ª–æ–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:\n"
        "- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "- –ú–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ (inline keyboards)\n"
        "- –¢–µ—Å—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –±–∞–ª–ª–æ–≤ –∑–∞ –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç\n"
        "- –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ PostgreSQL\n\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –í–∞—à OpenAI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n"
        f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: {current_time_str}\n"
    )
    reply_markup = keyboards.back_to_main_menu_keyboard()
    await _send_or_edit_menu(update, context, info_text, reply_markup)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ ---
async def quiz_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ –ö–æ–º–∞–Ω–¥–∞ /quiz """
    await register_user_if_not_exists(update)
    text = "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏:</b>"
    reply_markup = keyboards.select_quiz_keyboard()
    await _send_or_edit_menu(update, context, text, reply_markup)

async def select_quiz_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞. """
    query = update.callback_query
    await query.answer()
    text = "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏:</b>"
    reply_markup = keyboards.select_quiz_keyboard()
    await _send_or_edit_menu(update, context, text, reply_markup)


async def start_quiz_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ –ù–∞—á–∏–Ω–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç. """
    query = update.callback_query
    await query.answer()
    quiz_id = query.data.split('_')[-1]

    quiz_data = get_quiz_by_id(quiz_id) # —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç max_possible_score
    if not quiz_data:
        error_text = "–û—à–∏–±–∫–∞: –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
        await _send_or_edit_menu(update, context, error_text, keyboards.back_to_main_menu_keyboard())
        return

    context.user_data['current_quiz_id'] = quiz_id
    context.user_data['current_question_index'] = 0
    context.user_data['current_quiz_score'] = 0
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –¥–ª—è —Ç–µ—Å—Ç–∞ –≤ user_data –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ
    context.user_data['current_quiz_max_score'] = quiz_data['max_possible_score']

    await send_quiz_question(update, context, edit_message=True)


async def send_quiz_question(update: Update, context: ContextTypes.DEFAULT_TYPE, edit_message: bool = True) -> None:
    """ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. """
    quiz_id = context.user_data.get('current_quiz_id')
    question_index = context.user_data.get('current_question_index', 0)

    quiz_data = get_quiz_by_id(quiz_id) # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞, –≤–∫–ª—é—á–∞—è –≤–æ–ø—Ä–æ—Å—ã –∏ max_possible_score
    if not quiz_data or question_index >= len(quiz_data["questions"]):
        # –≠—Ç–∞ —Å–∏—Ç—É–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ quiz_answer_callback (–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞)
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_quiz_question: –ù–µ–≤–µ—Ä–Ω—ã–π quiz_id ({quiz_id}) –∏–ª–∏ question_index ({question_index})")
        error_text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å —Ç–µ—Å—Ç–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é."
        await _send_or_edit_menu(update,context, error_text, keyboards.back_to_main_menu_keyboard())
        return

    question = quiz_data["questions"][question_index]
    question_text = (
        f"‚ùì <b>–í–æ–ø—Ä–æ—Å {question_index + 1}/{len(quiz_data['questions'])} ({quiz_data['name']})</b>\n\n"
        f"{question['text']}\n\n"
        f"<i>–¢–µ–∫—É—â–∏–π –±–∞–ª–ª: {context.user_data.get('current_quiz_score',0)}</i>"
    )
    reply_markup = keyboards.quiz_question_keyboard(question['options'], question_index, quiz_id)

    if edit_message and update.callback_query:
        await _send_or_edit_menu(update, context, question_text, reply_markup)
    elif update.message: # –ö—Ä–∞–π–Ω–µ —Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞, –Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã
        await update.message.reply_html(text=question_text, reply_markup=reply_markup)
    elif update.effective_chat: # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ –µ—Å—Ç—å —á–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞)
         await context.bot.send_message(chat_id=update.effective_chat.id, text=question_text, reply_markup=reply_markup, parse_mode='HTML')


async def quiz_answer_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞. """
    query = update.callback_query
    await query.answer()

    data_parts = query.data.split('_') # ans_{quiz_id}_{question_index}_{answer_index}
    quiz_id_from_callback = data_parts[1]
    question_index_from_callback = int(data_parts[2])
    selected_option_index = int(data_parts[3])

    current_quiz_id = context.user_data.get('current_quiz_id')
    current_question_index = context.user_data.get('current_question_index')

    if quiz_id_from_callback != current_quiz_id or question_index_from_callback != current_question_index:
        logger.warning(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å. User: {update.effective_user.id}, "
                       f"–û–∂–∏–¥–∞–ª–æ—Å—å: qid={current_quiz_id} qidx={current_question_index}, "
                       f"–ü–æ–ª—É—á–µ–Ω–æ: qid={quiz_id_from_callback} qidx={question_index_from_callback}")
        await query.message.reply_text("–ü–æ—Ö–æ–∂–µ, –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Å—Ç–∞—Ä—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.")
        # –ù–µ –º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ —Å–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è
        return

    quiz_data = get_quiz_by_id(current_quiz_id)
    question = quiz_data["questions"][current_question_index]
    selected_option = question["options"][selected_option_index]
    score_for_answer = selected_option.get("score", 0)

    context.user_data['current_quiz_score'] = context.user_data.get('current_quiz_score', 0) + score_for_answer
    feedback_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏: \"{selected_option['text']}\".\n<b>–ù–∞—á–∏—Å–ª–µ–Ω–æ –±–∞–ª–ª–æ–≤: +{score_for_answer}</b>\n–û–±—â–∏–π –±–∞–ª–ª: {context.user_data['current_quiz_score']}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–¥–±–µ–∫ –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ç–∏—Ä–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å—Ä–∞–∑—É
    # –∏–ª–∏ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º, –¥–æ–±–∞–≤–∏–≤ —Ñ–∏–¥–±–µ–∫
    await query.message.reply_html(text=feedback_text)
    # await asyncio.sleep(1.5) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ–ª –ø—Ä–æ—á–∏—Ç–∞—Ç—å

    context.user_data['current_question_index'] += 1
    if context.user_data['current_question_index'] < len(quiz_data["questions"]):
        await send_quiz_question(update, context, edit_message=True) # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
    else:
        # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
        user_id = update.effective_user.id
        achieved_score = context.user_data['current_quiz_score']
        max_possible_score_for_quiz = context.user_data.get('current_quiz_max_score', quiz_data['max_possible_score']) # –ë–µ—Ä–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∏–ª–∏ –∏–∑ quiz_data
        quiz_name = quiz_data["name"]

        database.save_quiz_result(user_id, quiz_name, achieved_score, max_possible_score_for_quiz)

        result_text = (
            f"üéâ <b>–¢–µ—Å—Ç '{quiz_name}' –∑–∞–≤–µ—Ä—à–µ–Ω!</b> üéâ\n\n"
            f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{achieved_score} –∏–∑ {max_possible_score_for_quiz}</b> –≤–æ–∑–º–æ–∂–Ω—ã—Ö –±–∞–ª–ª–æ–≤.\n\n"
        )
        percentage = (achieved_score / max_possible_score_for_quiz * 100) if max_possible_score_for_quiz > 0 else 0
        if percentage == 100:
            result_text += "üèÜ –í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
        elif percentage >= 75:
            result_text += "üëç –û—Ç–ª–∏—á–Ω–æ! –í—ã –Ω–∞–±—Ä–∞–ª–∏ –≤—ã—Å–æ–∫–∏–π –±–∞–ª–ª!"
        elif percentage >= 50:
            result_text += "üòä –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
        elif percentage >= 25:
            result_text += "üôÇ –ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –µ—Å—Ç—å –∫ —á–µ–º—É —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è."
        else:
            result_text += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, —É –≤–∞—Å –ø–æ–ª—É—á–∏—Ç—Å—è –ª—É—á—à–µ! üí™"

        await _send_or_edit_menu(update, context, result_text, keyboards.back_to_main_menu_keyboard())

        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Å—Ç–∞
        for key in ['current_quiz_id', 'current_question_index', 'current_quiz_score', 'current_quiz_max_score']:
            context.user_data.pop(key, None)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
async def main_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    menu_text = "üìã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>"
    reply_markup = keyboards.main_menu_keyboard()
    await _send_or_edit_menu(update, context, menu_text, reply_markup)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥/—Å–æ–æ–±—â–µ–Ω–∏–π ---
async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "ü§∑‚Äç‚ôÇÔ∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é."
    )

async def unknown_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üìù –Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É, "
        "–Ω–∞—á–Ω–∏—Ç–µ –µ–µ —Å —Å–∏–º–≤–æ–ª–∞ '/' –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é."
    )


# --- –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
start_handler = CommandHandler('start', start_command)
help_handler = CommandHandler('help', help_command)
menu_handler_cmd = CommandHandler('menu', menu_command)
info_handler_cmd = CommandHandler('info', info_command)
quiz_handler_cmd = CommandHandler('quiz', quiz_command)

callback_query_handlers = [
    CallbackQueryHandler(main_menu_callback, pattern='^main_menu$'),
    CallbackQueryHandler(info_command, pattern='^get_info$'),
    CallbackQueryHandler(select_quiz_callback, pattern='^select_quiz$'),
    CallbackQueryHandler(start_quiz_callback, pattern=r'^start_quiz_'),
    CallbackQueryHandler(quiz_answer_callback, pattern=r'^ans_'),
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è 'no_quizzes_available' –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    CallbackQueryHandler(main_menu_callback, pattern='^no_quizzes_available$') # –ü—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–µ—Ç –≤ –º–µ–Ω—é
]

unknown_command_handler = MessageHandler(filters.COMMAND, unknown_command)
unknown_text_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, unknown_text)

ALL_HANDLERS = [
    start_handler,
    help_handler,
    menu_handler_cmd,
    info_handler_cmd,
    quiz_handler_cmd,
    *callback_query_handlers,
    # unknown_command_handler, # –ü–µ—Ä–µ–º–µ—Å—Ç–∏–º –≤ main.py –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    # unknown_text_handler,
]